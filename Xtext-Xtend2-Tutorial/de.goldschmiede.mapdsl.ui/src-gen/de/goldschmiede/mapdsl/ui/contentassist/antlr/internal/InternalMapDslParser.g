/*
* generated by Xtext
*/
parser grammar InternalMapDslParser;

options {
	tokenVocab=InternalMapDslLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@header {
package de.goldschmiede.mapdsl.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.goldschmiede.mapdsl.services.MapDslGrammarAccess;

}

@members {
 
 	private MapDslGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("KEYWORD_1", "'.'");
		tokenNameToValue.put("KEYWORD_2", "'{'");
		tokenNameToValue.put("KEYWORD_3", "'}'");
		tokenNameToValue.put("KEYWORD_4", "'.*'");
		tokenNameToValue.put("KEYWORD_5", "'=>'");
		tokenNameToValue.put("KEYWORD_6", "'to'");
		tokenNameToValue.put("KEYWORD_7", "'with'");
		tokenNameToValue.put("KEYWORD_8", "'import'");
		tokenNameToValue.put("KEYWORD_9", "'map BO'");
 	}
 	
    public void setGrammarAccess(MapDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapping
entryRuleMapping 
:
{ before(grammarAccess.getMappingRule()); }
	 ruleMapping
{ after(grammarAccess.getMappingRule()); } 
	 EOF 
;

// Rule Mapping
ruleMapping 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMappingAccess().getGroup()); }
(rule__Mapping__Group__0)
{ after(grammarAccess.getMappingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeMap
entryRuleAttributeMap 
:
{ before(grammarAccess.getAttributeMapRule()); }
	 ruleAttributeMap
{ after(grammarAccess.getAttributeMapRule()); } 
	 EOF 
;

// Rule AttributeMap
ruleAttributeMap 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAttributeMapAccess().getAttributeMoveMapParserRuleCall()); }
	ruleAttributeMoveMap
{ after(grammarAccess.getAttributeMapAccess().getAttributeMoveMapParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeMoveMap
entryRuleAttributeMoveMap 
:
{ before(grammarAccess.getAttributeMoveMapRule()); }
	 ruleAttributeMoveMap
{ after(grammarAccess.getAttributeMoveMapRule()); } 
	 EOF 
;

// Rule AttributeMoveMap
ruleAttributeMoveMap 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAttributeMoveMapAccess().getGroup()); }
(rule__AttributeMoveMap__Group__0)
{ after(grammarAccess.getAttributeMoveMapAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNameWithWildcards
entryRuleQualifiedNameWithWildcards 
:
{ before(grammarAccess.getQualifiedNameWithWildcardsRule()); }
	 ruleQualifiedNameWithWildcards
{ after(grammarAccess.getQualifiedNameWithWildcardsRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildcards
ruleQualifiedNameWithWildcards 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getQualifiedNameWithWildcardsAccess().getGroup()); }
(rule__QualifiedNameWithWildcards__Group__0)
{ after(grammarAccess.getQualifiedNameWithWildcardsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsAssignment_0()); }
(rule__Model__ImportsAssignment_0)*
{ after(grammarAccess.getModelAccess().getImportsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getMapsAssignment_1()); }
(rule__Model__MapsAssignment_1)*
{ after(grammarAccess.getModelAccess().getMapsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Mapping__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__0__Impl
	rule__Mapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getMapBOKeyword_0()); }

	KEYWORD_9 

{ after(grammarAccess.getMappingAccess().getMapBOKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__1__Impl
	rule__Mapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getSourceTypeAssignment_1()); }
(rule__Mapping__SourceTypeAssignment_1)
{ after(grammarAccess.getMappingAccess().getSourceTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__2__Impl
	rule__Mapping__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getToKeyword_2()); }

	KEYWORD_6 

{ after(grammarAccess.getMappingAccess().getToKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__3__Impl
	rule__Mapping__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getTargetTypeAssignment_3()); }
(rule__Mapping__TargetTypeAssignment_3)
{ after(grammarAccess.getMappingAccess().getTargetTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getGroup_4()); }
(rule__Mapping__Group_4__0)?
{ after(grammarAccess.getMappingAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Mapping__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group_4__0__Impl
	rule__Mapping__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getWithKeyword_4_0()); }

	KEYWORD_7 

{ after(grammarAccess.getMappingAccess().getWithKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group_4__1__Impl
	rule__Mapping__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getLeftCurlyBracketKeyword_4_1()); }

	KEYWORD_2 

{ after(grammarAccess.getMappingAccess().getLeftCurlyBracketKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group_4__2__Impl
	rule__Mapping__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getMappingAccess().getAttributeMapAssignment_4_2()); }
(rule__Mapping__AttributeMapAssignment_4_2)
{ after(grammarAccess.getMappingAccess().getAttributeMapAssignment_4_2()); }
)
(
{ before(grammarAccess.getMappingAccess().getAttributeMapAssignment_4_2()); }
(rule__Mapping__AttributeMapAssignment_4_2)*
{ after(grammarAccess.getMappingAccess().getAttributeMapAssignment_4_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getRightCurlyBracketKeyword_4_3()); }

	KEYWORD_3 

{ after(grammarAccess.getMappingAccess().getRightCurlyBracketKeyword_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AttributeMoveMap__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeMoveMap__Group__0__Impl
	rule__AttributeMoveMap__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMoveMap__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMoveMapAccess().getSourceAttributeAssignment_0()); }
(rule__AttributeMoveMap__SourceAttributeAssignment_0)
{ after(grammarAccess.getAttributeMoveMapAccess().getSourceAttributeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeMoveMap__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeMoveMap__Group__1__Impl
	rule__AttributeMoveMap__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMoveMap__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMoveMapAccess().getEqualsSignGreaterThanSignKeyword_1()); }

	KEYWORD_5 

{ after(grammarAccess.getAttributeMoveMapAccess().getEqualsSignGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeMoveMap__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeMoveMap__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMoveMap__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMoveMapAccess().getTargetAttributeAssignment_2()); }
(rule__AttributeMoveMap__TargetAttributeAssignment_2)
{ after(grammarAccess.getAttributeMoveMapAccess().getTargetAttributeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	KEYWORD_1 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildcards__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcards__Group__0__Impl
	rule__QualifiedNameWithWildcards__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcards__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardsAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
{ after(grammarAccess.getQualifiedNameWithWildcardsAccess().getQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcards__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcards__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcards__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardsAccess().getFullStopAsteriskKeyword_1()); }
(
	KEYWORD_4 
)?
{ after(grammarAccess.getQualifiedNameWithWildcardsAccess().getFullStopAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	KEYWORD_8 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
(rule__Import__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__ImportsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); }
	ruleImport{ after(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__MapsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getMapsMappingParserRuleCall_1_0()); }
	ruleMapping{ after(grammarAccess.getModelAccess().getMapsMappingParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__SourceTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getSourceTypeBusinessObjectCrossReference_1_0()); }
(
{ before(grammarAccess.getMappingAccess().getSourceTypeBusinessObjectQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getMappingAccess().getSourceTypeBusinessObjectQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getMappingAccess().getSourceTypeBusinessObjectCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__TargetTypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getTargetTypeBusinessObjectCrossReference_3_0()); }
(
{ before(grammarAccess.getMappingAccess().getTargetTypeBusinessObjectQualifiedNameParserRuleCall_3_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getMappingAccess().getTargetTypeBusinessObjectQualifiedNameParserRuleCall_3_0_1()); }
)
{ after(grammarAccess.getMappingAccess().getTargetTypeBusinessObjectCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__AttributeMapAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getAttributeMapAttributeMapParserRuleCall_4_2_0()); }
	ruleAttributeMap{ after(grammarAccess.getMappingAccess().getAttributeMapAttributeMapParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMoveMap__SourceAttributeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMoveMapAccess().getSourceAttributeAttributeCrossReference_0_0()); }
(
{ before(grammarAccess.getAttributeMoveMapAccess().getSourceAttributeAttributeQualifiedNameParserRuleCall_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getAttributeMoveMapAccess().getSourceAttributeAttributeQualifiedNameParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getAttributeMoveMapAccess().getSourceAttributeAttributeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMoveMap__TargetAttributeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMoveMapAccess().getTargetAttributeAttributeCrossReference_2_0()); }
(
{ before(grammarAccess.getAttributeMoveMapAccess().getTargetAttributeAttributeQualifiedNameParserRuleCall_2_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getAttributeMoveMapAccess().getTargetAttributeAttributeQualifiedNameParserRuleCall_2_0_1()); }
)
{ after(grammarAccess.getAttributeMoveMapAccess().getTargetAttributeAttributeCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardsParserRuleCall_1_0()); }
	ruleQualifiedNameWithWildcards{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


