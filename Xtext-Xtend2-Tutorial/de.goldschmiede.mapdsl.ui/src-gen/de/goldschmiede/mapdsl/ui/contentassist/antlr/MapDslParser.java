/*
* generated by Xtext
*/
package de.goldschmiede.mapdsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.goldschmiede.mapdsl.services.MapDslGrammarAccess;

public class MapDslParser extends AbstractContentAssistParser {
	
	@Inject
	private MapDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.goldschmiede.mapdsl.ui.contentassist.antlr.internal.InternalMapDslParser createParser() {
		de.goldschmiede.mapdsl.ui.contentassist.antlr.internal.InternalMapDslParser result = new de.goldschmiede.mapdsl.ui.contentassist.antlr.internal.InternalMapDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getMappingAccess().getGroup(), "rule__Mapping__Group__0");
					put(grammarAccess.getMappingAccess().getGroup_4(), "rule__Mapping__Group_4__0");
					put(grammarAccess.getAttributeMoveMapAccess().getGroup(), "rule__AttributeMoveMap__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildcardsAccess().getGroup(), "rule__QualifiedNameWithWildcards__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getModelAccess().getImportsAssignment_0(), "rule__Model__ImportsAssignment_0");
					put(grammarAccess.getModelAccess().getMapsAssignment_1(), "rule__Model__MapsAssignment_1");
					put(grammarAccess.getMappingAccess().getSourceTypeAssignment_1(), "rule__Mapping__SourceTypeAssignment_1");
					put(grammarAccess.getMappingAccess().getTargetTypeAssignment_3(), "rule__Mapping__TargetTypeAssignment_3");
					put(grammarAccess.getMappingAccess().getAttributeMapAssignment_4_2(), "rule__Mapping__AttributeMapAssignment_4_2");
					put(grammarAccess.getAttributeMoveMapAccess().getSourceAttributeAssignment_0(), "rule__AttributeMoveMap__SourceAttributeAssignment_0");
					put(grammarAccess.getAttributeMoveMapAccess().getTargetAttributeAssignment_2(), "rule__AttributeMoveMap__TargetAttributeAssignment_2");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.goldschmiede.mapdsl.ui.contentassist.antlr.internal.InternalMapDslParser typedParser = (de.goldschmiede.mapdsl.ui.contentassist.antlr.internal.InternalMapDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MapDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MapDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
