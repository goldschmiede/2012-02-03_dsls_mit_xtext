/*
* generated by Xtext
*/
parser grammar InternalMapDslParser;

options {
	tokenVocab=InternalMapDslLexer;
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@header {
package de.goldschmiede.mapdsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.goldschmiede.mapdsl.services.MapDslGrammarAccess;

}

@members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 

	private MapDslGrammarAccess grammarAccess;
	 	
	public InternalMapDslParser(TokenStream input, MapDslGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "Model";	
	} 
	   	   	
	@Override
	protected MapDslGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getMapsMappingParserRuleCall_1_0()); 
	    }
		lv_maps_1_0=ruleMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"maps",
        		lv_maps_1_0, 
        		"Mapping");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleMapping
entryRuleMapping returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMappingRule()); }
	 iv_ruleMapping=ruleMapping 
	 { $current=$iv_ruleMapping.current; } 
	 EOF 
;

// Rule Mapping
ruleMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_9
    {
    	newLeafNode(otherlv_0, grammarAccess.getMappingAccess().getMapBOKeyword_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMappingRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMappingAccess().getSourceTypeBusinessObjectCrossReference_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=KEYWORD_6
    {
    	newLeafNode(otherlv_2, grammarAccess.getMappingAccess().getToKeyword_2());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMappingRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMappingAccess().getTargetTypeBusinessObjectCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=KEYWORD_7
    {
    	newLeafNode(otherlv_4, grammarAccess.getMappingAccess().getWithKeyword_4_0());
    }

	otherlv_5=KEYWORD_2
    {
    	newLeafNode(otherlv_5, grammarAccess.getMappingAccess().getLeftCurlyBracketKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingAccess().getAttributeMapAttributeMapParserRuleCall_4_2_0()); 
	    }
		lv_attributeMap_6_0=ruleAttributeMap		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingRule());
	        }
       		add(
       			$current, 
       			"attributeMap",
        		lv_attributeMap_6_0, 
        		"AttributeMap");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_7=KEYWORD_3
    {
    	newLeafNode(otherlv_7, grammarAccess.getMappingAccess().getRightCurlyBracketKeyword_4_3());
    }
)?)
;





// Entry rule entryRuleAttributeMap
entryRuleAttributeMap returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAttributeMapRule()); }
	 iv_ruleAttributeMap=ruleAttributeMap 
	 { $current=$iv_ruleAttributeMap.current; } 
	 EOF 
;

// Rule AttributeMap
ruleAttributeMap returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeMapAccess().getAttributeMoveMapParserRuleCall()); 
    }
    this_AttributeMoveMap_0=ruleAttributeMoveMap
    {
        $current = $this_AttributeMoveMap_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAttributeMoveMap
entryRuleAttributeMoveMap returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAttributeMoveMapRule()); }
	 iv_ruleAttributeMoveMap=ruleAttributeMoveMap 
	 { $current=$iv_ruleAttributeMoveMap.current; } 
	 EOF 
;

// Rule AttributeMoveMap
ruleAttributeMoveMap returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeMoveMapRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getAttributeMoveMapAccess().getSourceAttributeAttributeCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_5
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeMoveMapAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeMoveMapRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getAttributeMoveMapAccess().getTargetAttributeAttributeCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw=KEYWORD_1 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleQualifiedNameWithWildcards
entryRuleQualifiedNameWithWildcards returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardsRule()); } 
	 iv_ruleQualifiedNameWithWildcards=ruleQualifiedNameWithWildcards 
	 { $current=$iv_ruleQualifiedNameWithWildcards.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcards
ruleQualifiedNameWithWildcards returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardsAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=KEYWORD_4 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardsAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_8
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardsParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildcards		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildcards");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





